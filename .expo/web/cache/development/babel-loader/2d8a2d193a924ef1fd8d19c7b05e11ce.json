{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/kasperronbog/WebstormProjects/FoodieGemz/components/Map.js\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport firebase from 'firebase';\nimport { Card } from \"react-native-paper\";\nimport SignUpForm from \"./SignUpForm\";\nimport LoginForm from \"./LoginForm\";\nimport Constants from 'expo-constants';\nimport MapView, { Marker } from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport { Accuracy } from \"expo-location\";\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport SearchPlaces from \"./SearchPlaces\";\n\nfunction Map() {\n  var _useState = useState({\n    loggedIn: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  function onAuthStateChange(callback) {\n    return firebase.auth().onAuthStateChanged(function (user) {\n      if (user) {\n        callback({\n          loggedIn: true,\n          user: user\n        });\n      } else {\n        callback({\n          loggedIn: false\n        });\n      }\n    });\n  }\n\n  useEffect(function () {\n    var unsubscribe = onAuthStateChange(setUser);\n    return function () {\n      unsubscribe();\n    };\n  }, []);\n  {}\n\n  if (!firebase.auth().currentUser) {\n    return React.createElement(ScrollView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, React.createElement(Image, {\n      source: require(\"../assets/dk-madkort.jpeg\"),\n      style: styles.image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }), React.createElement(Card, {\n      style: {\n        padding: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }, React.createElement(SignUpForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    })), React.createElement(Card, {\n      style: {\n        padding: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, React.createElement(LoginForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    })), React.createElement(Text, {\n      style: styles.paragraph2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, \"Jeg h\\xE5ber virkelig dette kan hj\\xE6lpe bare en smule!\"));\n  } else {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }\n      }, React.createElement(GooglePlacesAutocomplete, {\n        placeholder: \"Search\",\n        miniLenght: 2,\n        autoFocus: false,\n        fetchDetails: true,\n        renderDescription: function renderDescription(row) {\n          return row.description;\n        },\n        onPress: function onPress(data) {\n          var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          console.log(data, details);\n        },\n        getDefaultValue: function getDefaultValue() {\n          return '';\n        },\n        query: {\n          key: 'AIzaSyCc8mR9JJqFV35qcL7WXn8nBvFPNGZ101w',\n          language: 'en',\n          types: \"establishment\"\n        },\n        styles: {\n          container: {\n            flex: 0,\n            position: \"absolute\",\n            width: \"100%\",\n            zIndex: 1\n          },\n          listView: {\n            backgroundColor: \"grey\"\n          }\n        },\n        currentLocation: true,\n        currentLocationLabel: \"Current Location\",\n        nearbyPlacesAPI: \"GooglePlacesSearch\",\n        GoogleReverseGeocodingQuery: {},\n        GooglePlacesSearchQuery: {\n          rankby: 'distance',\n          type: 'restaurant'\n        },\n        GooglePlacesDetailsQuery: {\n          fields: 'formatted_address'\n        },\n        debounce: 200,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }\n      }), React.createElement(MapView, {\n        provider: 'google',\n        initialRegion: {\n          latitude: 55.676098,\n          longitude: 12.568337,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421\n        },\n        style: styles.map,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 17\n        }\n      }, React.createElement(Marker, {\n        coordinate: {\n          latitude: 55.676195,\n          longitude: 12.569419\n        },\n        title: \"R\\xE5dhuspladsen\",\n        description: \"blablabal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }\n      }), React.createElement(Marker, {\n        coordinate: {\n          latitude: 55.673035,\n          longitude: 12.568756\n        },\n        title: \"Tivoli\",\n        description: \"blablabal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }\n      }), React.createElement(Marker, {\n        coordinate: {\n          latitude: 55.674082,\n          longitude: 12.598108\n        },\n        title: \"Christiania\",\n        description: \"blablabal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }\n      })));\n    }\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flexGrow: 1,\n    marginTop: 50\n  },\n  map: {\n    flex: 1\n  },\n  infoBox: {\n    height: 200,\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: 'yellow',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  infoText: {\n    fontSize: 15\n  },\n  image: {\n    marginHorizontal: \"10%\",\n    marginTop: \"5%\",\n    marginBottom: \"5%\",\n    width: \"80%\",\n    height: \"25%\"\n  },\n  paragraph2: {\n    marginTop: '50%',\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  }\n});\nexport default Map;","map":{"version":3,"sources":["/Users/kasperronbog/WebstormProjects/FoodieGemz/components/Map.js"],"names":["React","useEffect","useState","firebase","Card","SignUpForm","LoginForm","Constants","MapView","Marker","Location","Accuracy","GooglePlacesAutocomplete","SearchPlaces","Map","loggedIn","user","setUser","onAuthStateChange","callback","auth","onAuthStateChanged","unsubscribe","currentUser","require","styles","image","padding","paragraph2","container","row","description","data","details","console","log","key","language","types","flex","position","width","zIndex","listView","backgroundColor","rankby","type","fields","latitude","longitude","latitudeDelta","longitudeDelta","map","StyleSheet","create","flexGrow","marginTop","infoBox","height","bottom","left","right","justifyContent","alignItems","infoText","fontSize","marginHorizontal","marginBottom","fontWeight","textAlign"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {View, Text, Button, StyleSheet, Image, SafeAreaView, ScrollView} from 'react-native';\nimport firebase from 'firebase';\nimport {Card} from \"react-native-paper\";\nimport SignUpForm from \"./SignUpForm\";\nimport LoginForm from \"./LoginForm\";\nimport Constants from 'expo-constants';\nimport MapView, {Marker} from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport {Accuracy} from \"expo-location\";\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport SearchPlaces from \"./SearchPlaces\";\n\n\n\nfunction Map () {\n\n    //Her oprettes bruger state variblen\n    const [user, setUser] = useState({loggedIn: false});\n\n    //onAuthstatechanged er en prædefineret metode, forsynet af firebase, som konstant observerer brugerens status (logget ind vs logget ud)\n    //Pba. brugerens status foretages et callback i form af setUSer metoden, som håndterer user-state variablens status.\n    function onAuthStateChange(callback) {\n        return firebase.auth().onAuthStateChanged(user => {\n            if (user) {\n                callback({loggedIn: true, user: user});\n            } else {\n                callback({loggedIn: false});\n            }\n        });\n    }\n\n    //Heri aktiverer vi vores listener i form af onAuthStateChanged, så vi dynamisk observerer om brugeren er aktiv eller ej.\n    useEffect(() => {\n        const unsubscribe = onAuthStateChange(setUser);\n        return () => {\n            unsubscribe();\n        };\n    }, []);\n\n    // -------------------------------------------------------------------------------------\n    {/*\n    //Her instantieres alle anvendte statevariabler\n    const [hasLocationPermission, setlocationPermission] = useState(false)\n    const [currentLocation, setCurrentLocation] = useState(null)\n    const [userMarkerCoordinates, setUserMarkerCoordinates] = useState([])\n    const [selectedCoordinate, setSelectedCoordinate] = useState(null)\n    const [selectedAddress, setSelectedAddress] = useState(null)\n\n    /*\n    * getLocationPermission udnytter den prædefinerede asynkrone metode requestForegroundPermissionsAsync,\n    * som aktiverer en forespørgsel om tilladelse til at benytte enhedens position\n    * resultatet af denne handling leveres og benyttes til at sætte værdien af locationPermission\n    * Værdien sættes pba. af værdien item.granted\n    * Læs mere i dokumentationen:  https://docs.expo.dev/versions/latest/sdk/location/\n    /\n    const getLocationPermission = async () => {\n        await Location.requestForegroundPermissionsAsync().then((item)=>{\n            setlocationPermission(item.granted)\n        } );\n\n    };\n\n    // I useEffect kaldes getlocationPermission, der sikrer at enheden forespørger tilladelse\n    // så snart appen kører\n    useEffect (() => {\n        const response = getLocationPermission()\n    });\n\n    /*\n    * Metoden updateLocation udnytter det prædefinerede asynkrone kald, getCurrentPositionAsync, returnerer enhedens aktuelle position\n    * Resultatet fra kaldet benyttes til at fastsætte værdien af currentlokation.\n    * argumentet, Accuracy.Balanced, angiver den nøjagtighed vi ønsker skal bruges til at angive positionen.\n    * Læs mere på den førnævnte dokumentation\n    /\n    const updateLocation = async () => {\n        await Location.getCurrentPositionAsync({accuracy: Accuracy.Balanced}).then((item)=>{\n            setCurrentLocation(item.coords)\n        } );\n    };\n    /*\n    * Metoden handleLongPress tager en event med som argument og henter værdien af et koordinatsæt fra denne\n    * Værdien gemmes i en variabel, der tilføjes til et array af koordinater.\n    /\n    const handleLongPress = event => {\n        const coordinate = event.nativeEvent.coordinate\n        setUserMarkerCoordinates((oldArray) => [...oldArray, coordinate])\n    };\n\n    /*\n  * Metoden handleSelectMarker tager en koordinat med som argument. Kordinaten bruges\n  * til at sætte værdien af selectedCoordinat-variablen\n  * Dernæst aktiveres et asynkront kald, i form af den prædefinerede metode, reverseGeocodeAsync.\n  * reverseGeocodeAsync omsætter koordinatsættet til en række data, herunder område- og adresse data.\n  * selectedAdress sættes til at være resultatet af det asynkrone kald\n    /\n    const handleSelectMarker = async coordinate =>{\n        setSelectedCoordinate(coordinate)\n        await Location.reverseGeocodeAsync(coordinate).then((data) => {\n                setSelectedAddress(data)\n            }\n        )\n    };\n\n\n    //Metoden closeInfoBox nulstiller værdienne fro selectedAddress og selectedCoordinate\n    const closeInfoBox = () =>\n        setSelectedCoordinate(null) && setSelectedAddress(null)\n\n    // RenderCurrentLocation tager props med som argument og tjekker om, der er givet adgang til enhedens lokationsdata\n    // Er der ikke givet adgang returneres der en tekstkomponent med instruktioner til brugeren\n    //Er der givet tilladelse og currenLocation ikke har en værdi, vil der fremvises en knap komponent\n    //Er der givet tilladelse go currentlokation har en værdi, vil lokationsdata blive udskrvet i en infoboks\n    const RenderCurrentLocation = (props) => {\n        if (props.hasLocationPermission === null) {\n            return null;\n        }\n        if (props.hasLocationPermission === false) {\n            return <Text>No location access. Go to settings to change</Text>;\n        }\n        return (\n            <View>\n                <Button style title=\"update location\" onPress={updateLocation} />\n                {currentLocation && (\n                    <Text>\n                        {`lat: ${currentLocation.latitude},\\nLong:${\n                            currentLocation.longitude\n                        }\\nacc: ${currentLocation.accuracy}`}\n                    </Text>\n                )}\n            </View>\n        );\n    };\n\n    */\n    }\n\n    //Hvis der af en eller anden grund ikke skulle være muligt at fremfinde den aktive bruger,\n    //skal der udprintes en besked om dette igennem en tekstkomponent\n    if (!firebase.auth().currentUser) {\n        return (\n            <ScrollView>\n                <Image\n                    source={require('../assets/dk-madkort.jpeg')}\n                    style={styles.image}/>\n\n                <Card style={{padding:20}}>\n                    <SignUpForm />\n                </Card>\n\n                <Card style={{padding:20}}>\n                    <LoginForm />\n                </Card>\n                <Text style={styles.paragraph2}>\n                    Jeg håber virkelig dette kan hjælpe bare en smule!\n                </Text>\n            </ScrollView>\n        )\n    }else\n        /*\n  * Dernæst kaldes RenderCurrenokation view\n  * Mapview er fremviser et kort, der viser brugerens lokation\n  * Dernæst aktiverer metoden handleLongPress igennem onLongPress\n  * I Mapview vises tre markører ud fra vilkårlige koordinatsæt. Hver markør får en titel og en beskrivelse\n  * Derudover vil alle koordinatsæt i userMarkerCoordinates blive vist som markører på kortet.\n  * For hver af markørerne vil metoden handleSelectMarker blive aktiveret ved onPress,\n  * hvorved selectedCoordinate og selectedAddres får en værdi og der udskrives data om den vaælgte markør\n  *\n  */\n    {\n        return (\n            <View style= {styles.container}>\n                {\n                    // https://www.npmjs.com/package/react-native-google-places-autocomplete\n                    // Video: https://www.youtube.com/watch?v=qlELLikT3FU&ab_channel=DarwinTech\n                }\n                <GooglePlacesAutocomplete\n                    placeholder='Search'\n                    miniLenght={2}\n                    autoFocus={false}\n                    fetchDetails={true}\n                    renderDescription={row=>row.description}\n\n                    onPress={(data, details = null) => {\n                        // 'details' is provided when fetchDetails = true\n                        console.log(data, details);\n                    }}\n                    getDefaultValue={()=>''}\n                    query={{\n                        // Husk at krypter API key, fordi ellers er den tilgængelig for alle!\n                        key: 'AIzaSyCc8mR9JJqFV35qcL7WXn8nBvFPNGZ101w',\n                        language: 'en', // Resultatets sprog\n                        types: \"establishment\"\n                    }}\n                    styles={{\n                        container: {flex: 0, position: \"absolute\", width: \"100%\", zIndex: 1},\n                        listView: {backgroundColor: \"grey\"},\n                    }}\n                    currentLocation={true}\n                    currentLocationLabel='Current Location'\n                    nearbyPlacesAPI='GooglePlacesSearch'\n                    GoogleReverseGeocodingQuery={{\n                        // ved ikke helt hvad man bruger dette til\n                    }}\n                    GooglePlacesSearchQuery={{\n                        rankby: 'distance',\n                        type: 'restaurant'\n                    }}\n                    GooglePlacesDetailsQuery={{\n                        fields: 'formatted_address'\n                    }}\n                    debounce={200} // devouncer req i ms. Sat til 0 for at fjerne debounce\n\n                />\n\n                {\n                    //<RenderCurrentLocation props={{hasLocationPermission: hasLocationPermission, currentLocation: currentLocation}} />\n                }\n                <MapView\n                    provider={'google'}\n                    initialRegion={{\n                        latitude: 55.676098,\n                        longitude: 12.568337,\n                        latitudeDelta: 0.0922,\n                        longitudeDelta: 0.0421,\n                    }}\n                    style={styles.map}\n\n                        /*\n                    showsUserLocation\n                    onLongPress={handleLongPress}\n                    */\n\n                    >\n\n                    <Marker\n                        coordinate={{ latitude: 55.676195, longitude: 12.569419 }}\n                        title=\"Rådhuspladsen\"\n                        description=\"blablabal\"\n                    />\n                    <Marker\n                        coordinate={{ latitude: 55.673035, longitude: 12.568756 }}\n                        title=\"Tivoli\"\n                        description=\"blablabal\"\n                    />\n                    <Marker\n                        coordinate={{ latitude: 55.674082, longitude: 12.598108 }}\n                        title=\"Christiania\"\n                        description=\"blablabal\"\n                    >\n                    </Marker>\n\n                    {/*userMarkerCoordinates.map((coordinate, index) => (\n                        <Marker\n                            coordinate={coordinate}\n                            key={index.toString()}\n                            onPress={() => handleSelectMarker(coordinate)}\n                        />\n                    ))}\n                    */\n                    }\n\n\n                </MapView>\n\n                {/*selectedCoordinate && selectedAddress && (\n                    <View style={styles.infoBox}>\n                        <Text style={styles.infoText}>\n                            {selectedCoordinate.latitude}, {selectedCoordinate.longitude}\n                        </Text>\n                        <Text style={styles.infoText}>\n                            name: {selectedAddress[0].name}  region: {selectedAddress[0].region}\n                        </Text>\n                        <Button title=\"close\" onPress={closeInfoBox} />\n                    </View>\n                )}\n                */\n                }\n            </View>\n        );\n    }\n}\n\n//Lokal styling til brug i Map\nconst styles = StyleSheet.create({\n    container: {\n        flexGrow: 1,\n        marginTop: 50\n        //justifyContent: 'center',\n        //paddingTop: Constants.statusBarHeight,\n        //backgroundColor: '#ecf0f1',\n        //padding: 8,\n    },\n    map: { flex: 1 },\n    infoBox: {\n        height: 200,\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n        right: 0,\n        backgroundColor: 'yellow',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flex: 1,\n    },\n    infoText: {\n        fontSize: 15,\n    },\n    image: {\n        marginHorizontal: \"10%\",\n        marginTop: \"5%\",\n        marginBottom: \"5%\",\n        width: \"80%\",\n        height: \"25%\",\n    },\n    paragraph2: {\n        marginTop: '50%',\n        fontSize: 18,\n        fontWeight: 'bold',\n        textAlign: 'center',\n    }\n});\n\n//Eksport af Loginform, således denne kan importeres og benyttes i andre komponenter\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}